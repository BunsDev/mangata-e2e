name: UI tests

on:
  pull_request:
    branches:
      - main
      - develop

  workflow_dispatch:
      inputs:
        scriptName:
          description: 'Name of the script to run'
          required: false
          default: 'test-ui'
        publishDockerImage:
          description: 'Generate new Docker image'
          required: false
          default: 'true'
      # For manually trigger
 

jobs:
  build:
    name: Build docker image
    if: contains(github.event.inputs.publishDockerImage, 'true')
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build Docker Image
        uses: docker/build-push-action@v2
        if: contains(github.event.inputs.publishDockerImage, 'true')
        with:
          file: "devops/dockerfiles/Dockerfile"
          push: true
          tags: mangatasolutions/mangata-e2e:latest

  test:
    name: Run UI tests
    runs-on: ubuntu-latest

    env:
      API_URL: 'wss://staging.testnode.mangata.finance:9945'
      TEST_PALLET_ADDRESS: ${{ secrets.TEST_PALLET_ADDRESS }}
      TEST_SUDO_NAME: ${{ secrets.TEST_SUDO_NAME }}
      MNEMONIC_META: ${{ secrets.MNEMONIC_META }}
      MNEMONIC_POLK: ${{ secrets.MNEMONIC_POLK }}
      TEST_SCRIPT: 'test-ui'
      NODE_ENV: test
      SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub

    steps:
      - name: Start Selenoid Server
        uses: Xotabu4/selenoid-github-action@v2
        with:
          selenoid-start-arguments: |
            --args "-timeout 300s" --browsers 'chrome' --last-versions 2
        
      - name: Set variables
        run:  |
          echo "TEST_SCRIPT=${{ github.event.inputs.scriptName || env.TEST_SCRIPT }}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn
      - name: Tsc code quality check
        run: yarn tsc-lint
      - name: ESLint code quality check
        run: yarn eslint  
      - name: installed packages
        run: yarn list

      - name: is selenoid started?
        run: curl http://localhost:4444/status

      - name: Run e2e tests
        run: yarn ${{ env.TEST_SCRIPT }}
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: reports/jest-*.xml    # Path to test results
          reporter: jest-junit        # Format of test results

      - name: Copy video files to reports folder
        if: success() || failure()
        run: "cp ~/.aerokube/selenoid/video/* reports/artifacts/"

      - name: Create  reports zip
        uses: papeloto/action-zip@v1
        if: success() || failure()
        with:
          files: reports/
          dest: reports.zip

      - name: Archive report files
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: ReportData
          path: reports.zip

      - name: Archive report files
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: TestReport
          path: reports/html-report/report.html